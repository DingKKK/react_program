{"ast":null,"code":"var _jsxFileName = \"/home/njucs/code/src/FileTree.js\";\n// src/FileTree.js\nimport React from 'react';\nimport { Tree } from 'antd';\nimport { FileOutlined, FolderOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  TreeNode\n} = Tree;\nconst FileTree = ({\n  fileData,\n  onSelectFile\n}) => {\n  const renderTreeNodes = data => {\n    return data.map(({\n      title,\n      key,\n      children,\n      type,\n      content,\n      path\n    }) => /*#__PURE__*/_jsxDEV(TreeNode, {\n      title: title,\n      type: type,\n      content: content,\n      path: path,\n      icon: type === 'file' ? /*#__PURE__*/_jsxDEV(FileOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(FolderOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 52\n      }, this),\n      selectable: type === 'file',\n      children: children && renderTreeNodes(children)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(Tree, {\n    showIcon: true,\n    defaultExpandAll: true,\n    onSelect: (selectedKeys, {\n      node\n    }) => onSelectFile(node),\n    children: renderTreeNodes(fileData)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c = FileTree;\nexport default FileTree;\nvar _c;\n$RefreshReg$(_c, \"FileTree\");","map":{"version":3,"names":["React","Tree","FileOutlined","FolderOutlined","jsxDEV","_jsxDEV","TreeNode","FileTree","fileData","onSelectFile","renderTreeNodes","data","map","title","key","children","type","content","path","icon","fileName","_jsxFileName","lineNumber","columnNumber","selectable","showIcon","defaultExpandAll","onSelect","selectedKeys","node","_c","$RefreshReg$"],"sources":["/home/njucs/code/src/FileTree.js"],"sourcesContent":["// src/FileTree.js\nimport React from 'react';\nimport { Tree } from 'antd';\nimport { FileOutlined, FolderOutlined } from '@ant-design/icons';\n\nconst { TreeNode } = Tree;\n\nconst FileTree = ({ fileData, onSelectFile }) => {\n  const renderTreeNodes = (data) => {\n    return data.map(({ title, key, children, type, content, path }) => (\n      <TreeNode\n        key={key}\n        title={title}\n        type={type}\n        content={content}\n        path={path}\n        icon={type === 'file' ? <FileOutlined /> : <FolderOutlined />}\n        selectable={type === 'file'}\n      >\n        {children && renderTreeNodes(children)}\n      </TreeNode>\n    ));\n  };\n\n  return (\n    <Tree showIcon defaultExpandAll onSelect={(selectedKeys, { node }) => onSelectFile(node)}>\n      {renderTreeNodes(fileData)}\n    </Tree>\n  );\n};\n\nexport default FileTree;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,YAAY,EAAEC,cAAc,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAM;EAAEC;AAAS,CAAC,GAAGL,IAAI;AAEzB,MAAMM,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAC/C,MAAMC,eAAe,GAAIC,IAAI,IAAK;IAChC,OAAOA,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEC,KAAK;MAAEC,GAAG;MAAEC,QAAQ;MAAEC,IAAI;MAAEC,OAAO;MAAEC;IAAK,CAAC,kBAC5Db,OAAA,CAACC,QAAQ;MAEPO,KAAK,EAAEA,KAAM;MACbG,IAAI,EAAEA,IAAK;MACXC,OAAO,EAAEA,OAAQ;MACjBC,IAAI,EAAEA,IAAK;MACXC,IAAI,EAAEH,IAAI,KAAK,MAAM,gBAAGX,OAAA,CAACH,YAAY;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAAGlB,OAAA,CAACF,cAAc;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAE;MAC9DC,UAAU,EAAER,IAAI,KAAK,MAAO;MAAAD,QAAA,EAE3BA,QAAQ,IAAIL,eAAe,CAACK,QAAQ;IAAC,GARjCD,GAAG;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASA,CACX,CAAC;EACJ,CAAC;EAED,oBACElB,OAAA,CAACJ,IAAI;IAACwB,QAAQ;IAACC,gBAAgB;IAACC,QAAQ,EAAEA,CAACC,YAAY,EAAE;MAAEC;IAAK,CAAC,KAAKpB,YAAY,CAACoB,IAAI,CAAE;IAAAd,QAAA,EACtFL,eAAe,CAACF,QAAQ;EAAC;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEX,CAAC;AAACO,EAAA,GAtBIvB,QAAQ;AAwBd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}